// To accompodate for eBPF restrictions, kernel rules are rather restrictive, you can only 'allow' or 'block'.
// For comparing integers you can only use 'eq' and 'neq', for strings additional two methods are available:
//  'starts_with' and 'ends_with'.
// All matches will be logged by default
// These are example rules, create rules for your own enviornment or reach out to us for commercial rules
{ kernel:  [
    // Block attempts to bind to sockets that are not on port 80 or 443
    {
        class: 'socket',
        event: 'listen',
        rules: {
            port: [{neq: 80}, {neq: 443 }]
        },
        action: 'block'
    },
    // Monitor file executions under /usr/bin and /usr/sbin
    {
        class: 'file',
        event: 'exec',
        rules: {
            path: [{starts_with: "/usr/bin"}, {starts_with: "/usr/sbin"}]
        },
        action: 'allow'
    },
    // Example of "not" rule
    {
        class: 'file',
        event: 'exec',
        rules: {
            path: [{not: {starts_with: "/usr/bin"}}]
        },
        action: 'allow'
    },
    // Example of context rule, this one block attempts to read /etc/passwd by processes within a container
    {
        class: 'file',
        event: 'open',
        context: ["container"],
        rules: {
            path: [{starts_with: "/etc/passwd"}]
        },
        action: 'block'
    },
    // Example of "ends_with" usage
    {
        class: 'file',
        event: 'exec',
        rules: {
            path: [{ends_with: "sed"}]
        },
        action: 'block'
    },
    // Example of rule monitoring egress connections
    {
        class: 'socket',
        event: 'connect',
        rules: {
            ip_version: [{eq: 4}],
            ip_type: [{neq: 'private'}],
            ip_proto: [{eq: 'tcp'}],
            port: [{neq: 80}, {neq: 443 }],
        },
        action: 'allow'
    }]
}