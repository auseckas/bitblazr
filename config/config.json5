{
    features: {
        // LSM, blocking functionality, with this off the kernel rules won't work
        lsm: false,
        // Tracepoints, used for monitoring
        tracepoints: true

    },
    limits: {
        max_events: 500, // maximum events per second, per CPU. Setting this to 0 disables limits
        backoff: 60 // backoff time in seconds, moniotring events will be suspended for this amount of time
    },
    tracing: {
        open_prefixes: [
            "/etc",
            "/usr/local/",
            "/opt",
            "/proc/config.gz",
            "/proc/kcore",
            "/sys/kernel",
            "/sys/firmware",
            "/var/log",
            "/var/www",
            "/home",
            "/root",
            "/tmp"
        ]
    },    
    // Logging setup
    logs: {
        default: {
            enable: true,
            target: "stdout",
        },
        errors: {
            enable: true,
            target: "stderr"
        },
        events: {
            enable: true,
            target: "stdout",
            format: "compact"
        },
        alerts: {
            enable: true,
            target: "file",
            format: "json",
            directory: "/tmp",
            prefix: "bitblazr_alerts.log",
            rotation: "hourly",
            max_files: 5
        }
//        alerts: {
//            enable: true,
//            target: "mqtt",
//            format: "cloudevents",
//            mqtt_uri: "mqtts://[unique uri token].s2.eu.hivemq.cloud:8883/mqtt",
//            mqtt_user: "***",
//            mqtt_pwd: "***",
//            mqtt_topic: "test"
//        }
    },
    // Definitions used in context detection, these labels can be used in rules
    process_labels: {
        container: [
            { contains: "containerd-shim-runc" },
            { ends_with: "runc"},
            { ends_with: "docker-entrypoint.sh" }
        ],
        shell: [
            { eq: "bash" },
            { ends_with: "/bash" },
            { ends_with: "/sh" },
            { ends_with: "/csh" },
            { ends_with: "/ksh" }
        ],
        webserver: [
            { starts_with: "nginx" },
        ],
        database: [
            { contains: "mysqld" },
        ]
    }
}